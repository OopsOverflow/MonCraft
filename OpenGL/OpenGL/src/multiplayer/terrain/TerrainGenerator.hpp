#pragma once

#include <thread>
#include <mutex>
#include <future>
#include <condition_variable>
#include <unordered_map>
#include <glm/glm.hpp>

#include "terrain/ChunkMap.hpp"
#include "SliceMap.hpp"
#include "ChunkGenerator.hpp"
#include "gl/Camera.hpp"
#include "util/PriorityList.hpp"
#include "util/AtomicCyclicList.hpp"
#include "save/SaveManager.hpp"
#include "terrain/World.hpp"


class TerrainGenerator
{
public:
  TerrainGenerator();
  ~TerrainGenerator();

  TerrainGenerator(TerrainGenerator const&) = delete;
  TerrainGenerator& operator=(TerrainGenerator const&) = delete;

  void update(glm::vec3 pos);

  void startGeneration();
  void stopGeneration();
  void toggleGeneration();
  bool generating;

  static const int chunkSize = 16; // TODO: in a config file
  static const int renderDistH = 30; // horizontal render distance (2n+1 chunks)
  static const int renderDistV = 10; // vertical render distance (2n+1 chunks)

private:
  const int chunksMaxCount;

  // TODO: should we use runtime alloc instead of compile-time ? Post release
  using WaitingList = AtomicCyclicList<glm::ivec3, (2*renderDistH+1)*(2*renderDistH+1)*(2*renderDistV+1)>;

  ChunkGenerator generator; // the chunk generator

  glm::ivec3 chunkPos; // in which chunk the player is
  bool chunkPosChanged;

  // threading
  std::thread mainWorkerThread; // manages the queue of chunks to generate
  static const int N_THREADS = 8;
  std::array<std::thread, N_THREADS> genWorkerThreads; // creates new chunks when it can
  std::mutex workerMutex;
  void mainWorker();
  void genWorker();

  std::shared_ptr<Chunk> getOrGen(glm::ivec3 cpos);
  void setupNeighbors(std::shared_ptr<Chunk> chunk);

  // utilities for workers
  bool sleepFor(std::chrono::milliseconds);
  void updateWaitingList();

  std::vector<glm::ivec3> busyList; // list of chunks beiing generated
  std::mutex busyListMutex;
  bool addInBusyList(glm::ivec3 cpos);
  void remFromBusyList(glm::ivec3 cpos);

  std::mutex posMutex;
  glm::ivec3 getChunkPos();
  void setChunkPos(glm::ivec3 cpos);
  bool hasPosChanged();

  // signals to stop the threads
  bool stopFlag;
  std::mutex stopMutex;
  std::condition_variable stopSignal;

  // chunk storage
  World& world;
  SliceMap sliceMap; // hashmap to hold the slices generated by structures
  WaitingList waitingChunks; // chunk positions yet to be loaded
  SaveManager save;
};
