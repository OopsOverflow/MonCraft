!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/mathis/Projects/MonCraft/Dependencies/datachannel-wasm/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$WEBRTC	wasm/js/webrtc.js	/^		$WEBRTC: {$/;"	c	class:WebRTC
$WEBSOCKET	wasm/js/websocket.js	/^		$WEBSOCKET: {$/;"	c	class:WebSocket
AnonymousFunction51d62d4a0100	wasm/js/webrtc.js	/^						.then(function(offer) {$/;"	f
AnonymousFunction51d62d4a0200	wasm/js/webrtc.js	/^						.catch(function(err) {$/;"	f
AnonymousFunction51d62d4a0300	wasm/js/webrtc.js	/^					.then(function() {$/;"	f
AnonymousFunction51d62d4a0400	wasm/js/webrtc.js	/^				.then(function() {$/;"	f
AnonymousFunction51d62d4a0500	wasm/js/webrtc.js	/^							.then(function(answer) {$/;"	f
AnonymousFunction51d62d4a0600	wasm/js/webrtc.js	/^							.catch(function(err) {$/;"	f
AnonymousFunction51d62d4a0700	wasm/js/webrtc.js	/^				.catch(function(err) {$/;"	f
AnonymousFunction51d62d4a0800	wasm/js/webrtc.js	/^				.catch(function(err) {$/;"	f
Answer	wasm/include/rtc/description.hpp	/^	enum class Type { Unspec, Offer, Answer, Pranswer, Rollback };$/;"	e	enum:rtc::Description::Type
BufferedAmountLowCallback	wasm/src/datachannel.cpp	/^void DataChannel::BufferedAmountLowCallback(void *ptr) {$/;"	f	class:rtc::DataChannel	typeref:typename:void
Building	README.md	/^## Building$/;"	s	chapter:datachannel-wasm - C++ WebRTC Data Channels for WebAssembly in browsers
Candidate	wasm/include/rtc/candidate.hpp	/^class Candidate {$/;"	c	namespace:rtc
Candidate	wasm/src/candidate.cpp	/^Candidate::Candidate(const string &candidate, const string &mid)$/;"	f	class:rtc::Candidate
CandidateCallback	wasm/src/peerconnection.cpp	/^void PeerConnection::CandidateCallback(const char *candidate, const char *mid, void *ptr) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
Channel	wasm/include/rtc/channel.hpp	/^class Channel {$/;"	c	namespace:rtc
Cleanup	wasm/include/rtc/rtc.hpp	/^inline void Cleanup() {}$/;"	f	namespace:rtc	typeref:typename:void
Closed	wasm/include/rtc/peerconnection.hpp	/^		Closed = 5$/;"	e	enum:rtc::PeerConnection::State
Complete	wasm/include/rtc/peerconnection.hpp	/^	enum class GatheringState : int { New = 0, InProgress = 1, Complete = 2 };$/;"	e	enum:rtc::PeerConnection::GatheringState
Configuration	wasm/include/rtc/configuration.hpp	/^struct Configuration {$/;"	s	namespace:rtc
Connected	wasm/include/rtc/peerconnection.hpp	/^		Connected = 2,$/;"	e	enum:rtc::PeerConnection::State
Connecting	wasm/include/rtc/peerconnection.hpp	/^		Connecting = 1,$/;"	e	enum:rtc::PeerConnection::State
DATACHANNELS_SRC	CMakeLists.txt	/^set(DATACHANNELS_SRC$/;"	v
DataChannel	wasm/include/rtc/datachannel.hpp	/^class DataChannel final : public Channel {$/;"	c	namespace:rtc
DataChannel	wasm/src/datachannel.cpp	/^DataChannel::DataChannel(int id) : mId(id), mConnected(false) {$/;"	f	class:rtc::DataChannel
DataChannelCallback	wasm/src/peerconnection.cpp	/^void PeerConnection::DataChannelCallback(int dc, void *ptr) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
DataChannelInit	wasm/include/rtc/peerconnection.hpp	/^struct DataChannelInit {$/;"	s	namespace:rtc
Description	wasm/include/rtc/description.hpp	/^class Description {$/;"	c	namespace:rtc
Description	wasm/src/description.cpp	/^Description::Description(const string &sdp, Type type) : mSdp(sdp), mType(typeToString(type)) {}$/;"	f	class:rtc::Description
Description	wasm/src/description.cpp	/^Description::Description(const string &sdp, string typeString)$/;"	f	class:rtc::Description
DescriptionCallback	wasm/src/peerconnection.cpp	/^void PeerConnection::DescriptionCallback(const char *sdp, const char *type, void *ptr) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
Disconnected	wasm/include/rtc/peerconnection.hpp	/^		Disconnected = 3,$/;"	e	enum:rtc::PeerConnection::State
Dummy	wasm/include/rtc/configuration.hpp	/^	enum class Type : int { Stun = 0, Turn, Dummy };$/;"	e	enum:rtc::IceServer::Type
EXPORT_DYNCALL	CMakeLists.txt	/^option(EXPORT_DYNCALL "Export runtime method dynCall" ON)$/;"	D
ErrorCallback	wasm/src/datachannel.cpp	/^void DataChannel::ErrorCallback(const char *error, void *ptr) {$/;"	f	class:rtc::DataChannel	typeref:typename:void
ErrorCallback	wasm/src/websocket.cpp	/^void WebSocket::ErrorCallback(const char *error, void *ptr) {$/;"	f	class:rtc::WebSocket	typeref:typename:void
Failed	wasm/include/rtc/peerconnection.hpp	/^		Failed = 4,$/;"	e	enum:rtc::PeerConnection::State
GatheringState	wasm/include/rtc/peerconnection.hpp	/^	enum class GatheringState : int { New = 0, InProgress = 1, Complete = 2 };$/;"	g	class:rtc::PeerConnection	typeref:typename:int
GatheringStateChangeCallback	wasm/src/peerconnection.cpp	/^void PeerConnection::GatheringStateChangeCallback(int state, void *ptr) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
HaveLocalOffer	wasm/include/rtc/peerconnection.hpp	/^		HaveLocalOffer = 1,$/;"	e	enum:rtc::PeerConnection::SignalingState
HaveLocalPranswer	wasm/include/rtc/peerconnection.hpp	/^		HaveLocalPranswer = 3,$/;"	e	enum:rtc::PeerConnection::SignalingState
HaveRemoteOffer	wasm/include/rtc/peerconnection.hpp	/^		HaveRemoteOffer = 2,$/;"	e	enum:rtc::PeerConnection::SignalingState
HaveRemotePranswer	wasm/include/rtc/peerconnection.hpp	/^		HaveRemotePranswer = 4,$/;"	e	enum:rtc::PeerConnection::SignalingState
IceServer	wasm/include/rtc/configuration.hpp	/^struct IceServer {$/;"	s	namespace:rtc
IceServer	wasm/src/configuration.cpp	/^IceServer::IceServer(const string &url) : hostname(url), port(0), type(Type::Dummy) {}$/;"	f	class:rtc::IceServer
IceServer	wasm/src/configuration.cpp	/^IceServer::IceServer(string hostname_, string service_)$/;"	f	class:rtc::IceServer
IceServer	wasm/src/configuration.cpp	/^IceServer::IceServer(string hostname_, string service_, string username_, string password_,$/;"	f	class:rtc::IceServer
IceServer	wasm/src/configuration.cpp	/^IceServer::IceServer(string hostname_, uint16_t port_)$/;"	f	class:rtc::IceServer
IceServer	wasm/src/configuration.cpp	/^IceServer::IceServer(string hostname_, uint16_t port_, string username_, string password_,$/;"	f	class:rtc::IceServer
InProgress	wasm/include/rtc/peerconnection.hpp	/^	enum class GatheringState : int { New = 0, InProgress = 1, Complete = 2 };$/;"	e	enum:rtc::PeerConnection::GatheringState
Installation	README.md	/^## Installation$/;"	s	chapter:datachannel-wasm - C++ WebRTC Data Channels for WebAssembly in browsers
MessageCallback	wasm/src/datachannel.cpp	/^void DataChannel::MessageCallback(const char *data, int size, void *ptr) {$/;"	f	class:rtc::DataChannel	typeref:typename:void
MessageCallback	wasm/src/websocket.cpp	/^void WebSocket::MessageCallback(const char *data, int size, void *ptr) {$/;"	f	class:rtc::WebSocket	typeref:typename:void
New	wasm/include/rtc/peerconnection.hpp	/^		New = 0,$/;"	e	enum:rtc::PeerConnection::State
New	wasm/include/rtc/peerconnection.hpp	/^	enum class GatheringState : int { New = 0, InProgress = 1, Complete = 2 };$/;"	e	enum:rtc::PeerConnection::GatheringState
Offer	wasm/include/rtc/description.hpp	/^	enum class Type { Unspec, Offer, Answer, Pranswer, Rollback };$/;"	e	enum:rtc::Description::Type
OpenCallback	wasm/src/datachannel.cpp	/^void DataChannel::OpenCallback(void *ptr) {$/;"	f	class:rtc::DataChannel	typeref:typename:void
OpenCallback	wasm/src/websocket.cpp	/^void WebSocket::OpenCallback(void *ptr) {$/;"	f	class:rtc::WebSocket	typeref:typename:void
PeerConnection	wasm/include/rtc/peerconnection.hpp	/^class PeerConnection final {$/;"	c	namespace:rtc
PeerConnection	wasm/src/peerconnection.cpp	/^PeerConnection::PeerConnection(const Configuration &config) {$/;"	f	class:rtc::PeerConnection
Pranswer	wasm/include/rtc/description.hpp	/^	enum class Type { Unspec, Offer, Answer, Pranswer, Rollback };$/;"	e	enum:rtc::Description::Type
Preload	wasm/include/rtc/rtc.hpp	/^inline void Preload() {}$/;"	f	namespace:rtc	typeref:typename:void
RTC_CANDIDATE_H	wasm/include/rtc/candidate.hpp	/^#define RTC_CANDIDATE_H$/;"	d
RTC_CHANNEL_H	wasm/include/rtc/channel.hpp	/^#define RTC_CHANNEL_H$/;"	d
RTC_CONFIGURATION_H	wasm/include/rtc/configuration.hpp	/^#define RTC_CONFIGURATION_H$/;"	d
RTC_DATACHANNEL_H	wasm/include/rtc/datachannel.hpp	/^#define RTC_DATACHANNEL_H$/;"	d
RTC_DESCRIPTION_H	wasm/include/rtc/description.hpp	/^#define RTC_DESCRIPTION_H$/;"	d
RTC_H	wasm/include/rtc/rtc.hpp	/^#define RTC_H$/;"	d
RTC_INCLUDE_H	wasm/include/rtc/common.hpp	/^#define RTC_INCLUDE_H$/;"	d
RTC_PEERCONNECTION_H	wasm/include/rtc/peerconnection.hpp	/^#define RTC_PEERCONNECTION_H$/;"	d
RTC_RELIABILITY_H	wasm/include/rtc/reliability.hpp	/^#define RTC_RELIABILITY_H$/;"	d
RTC_WEBSOCKET_H	wasm/include/rtc/websocket.hpp	/^#define RTC_WEBSOCKET_H$/;"	d
RelayType	wasm/include/rtc/configuration.hpp	/^	enum class RelayType : int { TurnUdp = 0, TurnTcp, TurnTls };$/;"	g	struct:rtc::IceServer	typeref:typename:int
Reliability	wasm/include/rtc/reliability.hpp	/^struct Reliability {$/;"	s	namespace:rtc
Reliable	wasm/include/rtc/reliability.hpp	/^	enum class Type { Reliable = 0, Rexmit, Timed };$/;"	e	enum:rtc::Reliability::Type
Rexmit	wasm/include/rtc/reliability.hpp	/^	enum class Type { Reliable = 0, Rexmit, Timed };$/;"	e	enum:rtc::Reliability::Type
Rollback	wasm/include/rtc/description.hpp	/^	enum class Type { Unspec, Offer, Answer, Pranswer, Rollback };$/;"	e	enum:rtc::Description::Type
SignalingState	wasm/include/rtc/peerconnection.hpp	/^	enum class SignalingState : int {$/;"	g	class:rtc::PeerConnection	typeref:typename:int
SignalingStateChangeCallback	wasm/src/peerconnection.cpp	/^void PeerConnection::SignalingStateChangeCallback(int state, void *ptr) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
Stable	wasm/include/rtc/peerconnection.hpp	/^		Stable = 0,$/;"	e	enum:rtc::PeerConnection::SignalingState
State	wasm/include/rtc/peerconnection.hpp	/^	enum class State : int {$/;"	g	class:rtc::PeerConnection	typeref:typename:int
StateChangeCallback	wasm/src/peerconnection.cpp	/^void PeerConnection::StateChangeCallback(int state, void *ptr) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
Stun	wasm/include/rtc/configuration.hpp	/^	enum class Type : int { Stun = 0, Turn, Dummy };$/;"	e	enum:rtc::IceServer::Type
Timed	wasm/include/rtc/reliability.hpp	/^	enum class Type { Reliable = 0, Rexmit, Timed };$/;"	e	enum:rtc::Reliability::Type
Turn	wasm/include/rtc/configuration.hpp	/^	enum class Type : int { Stun = 0, Turn, Dummy };$/;"	e	enum:rtc::IceServer::Type
TurnTcp	wasm/include/rtc/configuration.hpp	/^	enum class RelayType : int { TurnUdp = 0, TurnTcp, TurnTls };$/;"	e	enum:rtc::IceServer::RelayType
TurnTls	wasm/include/rtc/configuration.hpp	/^	enum class RelayType : int { TurnUdp = 0, TurnTcp, TurnTls };$/;"	e	enum:rtc::IceServer::RelayType
TurnUdp	wasm/include/rtc/configuration.hpp	/^	enum class RelayType : int { TurnUdp = 0, TurnTcp, TurnTls };$/;"	e	enum:rtc::IceServer::RelayType
Type	wasm/include/rtc/configuration.hpp	/^	enum class Type : int { Stun = 0, Turn, Dummy };$/;"	g	struct:rtc::IceServer	typeref:typename:int
Type	wasm/include/rtc/description.hpp	/^	enum class Type { Unspec, Offer, Answer, Pranswer, Rollback };$/;"	g	class:rtc::Description
Type	wasm/include/rtc/reliability.hpp	/^	enum class Type { Reliable = 0, Rexmit, Timed };$/;"	g	struct:rtc::Reliability
TypeMap_t	wasm/src/description.cpp	/^	using TypeMap_t = std::unordered_map<string, Type>;$/;"	t	function:rtc::Description::stringToType	typeref:typename:std::unordered_map<string,Type>	file:
Unspec	wasm/include/rtc/description.hpp	/^	enum class Type { Unspec, Offer, Answer, Pranswer, Rollback };$/;"	e	enum:rtc::Description::Type
WASM_OPTS	CMakeLists.txt	/^set(WASM_OPTS "-pthread")$/;"	v
WASM_SRC_DIR	CMakeLists.txt	/^set(WASM_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}\/wasm\/src)$/;"	v
WebRTC	wasm/js/webrtc.js	/^	var WebRTC = {$/;"	c
WebSocket	wasm/include/rtc/websocket.hpp	/^class WebSocket final : public Channel {$/;"	c	namespace:rtc
WebSocket	wasm/js/websocket.js	/^	var WebSocket = {$/;"	c
WebSocket	wasm/src/websocket.cpp	/^WebSocket::WebSocket() : mId(0), mConnected(false) {}$/;"	f	class:rtc::WebSocket
__anon0b2e70e70102	wasm/src/datachannel.cpp	/^	    overloaded{[this](const binary &b) {$/;"	f	function:rtc::DataChannel::send	file:
__anon0b2e70e70202	wasm/src/datachannel.cpp	/^	               [this](const string &s) { return rtcSendMessage(mId, s.c_str(), -1) >= 0; }},$/;"	f	function:rtc::DataChannel::send	file:
__anon8c07361b0102	wasm/src/websocket.cpp	/^	    overloaded{[this](const binary &b) {$/;"	f	function:rtc::WebSocket::send	file:
__anon8c07361b0202	wasm/src/websocket.cpp	/^	               [this](const string &s) { return wsSendMessage(mId, s.c_str(), -1) >= 0; }},$/;"	f	function:rtc::WebSocket::send	file:
__anon96cdd1cd0102	wasm/src/channel.cpp	/^	           stringCallback = std::move(stringCallback)](message_variant data) {$/;"	f	function:rtc::Channel::onMessage	file:
addRemoteCandidate	wasm/src/peerconnection.cpp	/^void PeerConnection::addRemoteCandidate(const Candidate &candidate) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
allocUTF8FromString	wasm/js/webrtc.js	/^			allocUTF8FromString: function(str) {$/;"	m	class:WebRTC.$WEBRTC
allocUTF8FromString	wasm/js/websocket.js	/^			allocUTF8FromString: function(str) {$/;"	m	class:WebSocket.$WEBSOCKET
binary	wasm/include/rtc/common.hpp	/^using binary = std::vector<byte>;$/;"	t	namespace:rtc	typeref:typename:std::vector<byte>
bufferedAmount	wasm/src/channel.cpp	/^size_t Channel::bufferedAmount() const { return 0; \/* Dummy *\/ }$/;"	f	class:rtc::Channel	typeref:typename:size_t
bufferedAmount	wasm/src/datachannel.cpp	/^size_t DataChannel::bufferedAmount() const {$/;"	f	class:rtc::DataChannel	typeref:typename:size_t
candidate	wasm/src/candidate.cpp	/^string Candidate::candidate() const { return mCandidate; }$/;"	f	class:rtc::Candidate	typeref:typename:string
cb	wasm/js/webrtc.js	/^			var cb = function() {$/;"	f	function:WebRTC.rtcSetOpenCallback
cb	wasm/js/webrtc.js	/^			var cb = function(evt) {$/;"	f	function:WebRTC.rtcSetBufferedAmountLowCallback
cb	wasm/js/webrtc.js	/^			var cb = function(evt) {$/;"	f	function:WebRTC.rtcSetErrorCallback
cb	wasm/js/websocket.js	/^			var cb = function() {$/;"	f	function:WebSocket.wsSetErrorCallback
cb	wasm/js/websocket.js	/^			var cb = function() {$/;"	f	function:WebSocket.wsSetOpenCallback
close	wasm/src/datachannel.cpp	/^void DataChannel::close() {$/;"	f	class:rtc::DataChannel	typeref:typename:void
close	wasm/src/websocket.cpp	/^void WebSocket::close() {$/;"	f	class:rtc::WebSocket	typeref:typename:void
closed	wasm/js/webrtc.js	/^					'closed': 5,$/;"	p	class:WebRTC.$WEBRTC.handleConnectionStateChange.map
complete	wasm/js/webrtc.js	/^					'complete': 2,$/;"	p	class:WebRTC.$WEBRTC.handleGatheringStateChange.map
config	wasm/js/webrtc.js	/^			var config = {$/;"	c	class:WebRTC.rtcCreatePeerConnection
connected	wasm/js/webrtc.js	/^					'connected': 2,$/;"	p	class:WebRTC.$WEBRTC.handleConnectionStateChange.map
connecting	wasm/js/webrtc.js	/^					'connecting': 1,$/;"	p	class:WebRTC.$WEBRTC.handleConnectionStateChange.map
createDataChannel	wasm/src/peerconnection.cpp	/^shared_ptr<DataChannel> PeerConnection::createDataChannel(const string &label,$/;"	f	class:rtc::PeerConnection	typeref:typename:shared_ptr<DataChannel>
dataChannelsMap	wasm/js/webrtc.js	/^			dataChannelsMap: {},$/;"	p	class:WebRTC.$WEBRTC
datachannel-wasm	CMakeLists.txt	/^add_library(datachannel-wasm STATIC ${DATACHANNELS_SRC})$/;"	t
datachannel-wasm	CMakeLists.txt	/^project(datachannel-wasm$/;"	p
datachannel-wasm - C++ WebRTC Data Channels for WebAssembly in browsers	README.md	/^# datachannel-wasm - C++ WebRTC Data Channels for WebAssembly in browsers$/;"	c
datachannelInit	wasm/js/webrtc.js	/^			var datachannelInit = {$/;"	c	class:WebRTC.rtcCreateDataChannel
disconnected	wasm/js/webrtc.js	/^					'disconnected': 3,$/;"	p	class:WebRTC.$WEBRTC.handleConnectionStateChange.map
failed	wasm/js/webrtc.js	/^					'failed': 4,$/;"	p	class:WebRTC.$WEBRTC.handleConnectionStateChange.map
gathering	wasm/js/webrtc.js	/^					'gathering': 1,$/;"	p	class:WebRTC.$WEBRTC.handleGatheringStateChange.map
gatheringState	wasm/src/peerconnection.cpp	/^PeerConnection::GatheringState PeerConnection::gatheringState() const { return mGatheringState; /;"	f	class:rtc::PeerConnection	typeref:typename:PeerConnection::GatheringState
handleCandidate	wasm/js/webrtc.js	/^			handleCandidate: function(peerConnection, candidate) {$/;"	m	class:WebRTC.$WEBRTC
handleConnectionStateChange	wasm/js/webrtc.js	/^			handleConnectionStateChange: function(peerConnection, connectionState) {$/;"	m	class:WebRTC.$WEBRTC
handleDescription	wasm/js/webrtc.js	/^			handleDescription: function(peerConnection, description) {$/;"	m	class:WebRTC.$WEBRTC
handleGatheringStateChange	wasm/js/webrtc.js	/^			handleGatheringStateChange: function(peerConnection, iceGatheringState) {$/;"	m	class:WebRTC.$WEBRTC
handleSignalingStateChange	wasm/js/webrtc.js	/^			handleSignalingStateChange: function(peerConnection, signalingState) {$/;"	m	class:WebRTC.$WEBRTC
have-local-offer	wasm/js/webrtc.js	/^					'have-local-offer': 1,$/;"	p	class:WebRTC.$WEBRTC.handleSignalingStateChange.map
have-local-pranswer	wasm/js/webrtc.js	/^					'have-local-pranswer': 3,$/;"	p	class:WebRTC.$WEBRTC.handleSignalingStateChange.map
have-remote-offer	wasm/js/webrtc.js	/^					'have-remote-offer': 2,$/;"	p	class:WebRTC.$WEBRTC.handleSignalingStateChange.map
have-remote-pranswer	wasm/js/webrtc.js	/^					'have-remote-pranswer': 4,$/;"	p	class:WebRTC.$WEBRTC.handleSignalingStateChange.map
hostname	wasm/include/rtc/configuration.hpp	/^	string hostname;$/;"	m	struct:rtc::IceServer	typeref:typename:string
iceServers	wasm/include/rtc/configuration.hpp	/^	std::vector<IceServer> iceServers;$/;"	m	struct:rtc::Configuration	typeref:typename:std::vector<IceServer>
iceServers	wasm/js/webrtc.js	/^				iceServers: iceServers,$/;"	p	class:WebRTC.rtcCreatePeerConnection.config
isClosed	wasm/src/datachannel.cpp	/^bool DataChannel::isClosed() const { return mId == 0; }$/;"	f	class:rtc::DataChannel	typeref:typename:bool
isClosed	wasm/src/websocket.cpp	/^bool WebSocket::isClosed() const { return mId == 0; }$/;"	f	class:rtc::WebSocket	typeref:typename:bool
isOpen	wasm/src/datachannel.cpp	/^bool DataChannel::isOpen() const { return mConnected; }$/;"	f	class:rtc::DataChannel	typeref:typename:bool
isOpen	wasm/src/websocket.cpp	/^bool WebSocket::isOpen() const { return mConnected; }$/;"	f	class:rtc::WebSocket	typeref:typename:bool
label	wasm/src/datachannel.cpp	/^std::string DataChannel::label() const { return mLabel; }$/;"	f	class:rtc::DataChannel	typeref:typename:std::string
localDescription	wasm/src/peerconnection.cpp	/^optional<Description> PeerConnection::localDescription() const {$/;"	f	class:rtc::PeerConnection	typeref:typename:optional<Description>
mBufferedAmountLowCallback	wasm/include/rtc/channel.hpp	/^	std::function<void()> mBufferedAmountLowCallback;$/;"	m	class:rtc::Channel	typeref:typename:std::function<void ()>
mCandidate	wasm/include/rtc/candidate.hpp	/^	string mCandidate;$/;"	m	class:rtc::Candidate	typeref:typename:string
mClosedCallback	wasm/include/rtc/channel.hpp	/^	std::function<void()> mClosedCallback;$/;"	m	class:rtc::Channel	typeref:typename:std::function<void ()>
mConnected	wasm/include/rtc/datachannel.hpp	/^	bool mConnected;$/;"	m	class:rtc::DataChannel	typeref:typename:bool
mConnected	wasm/include/rtc/websocket.hpp	/^	bool mConnected;$/;"	m	class:rtc::WebSocket	typeref:typename:bool
mDataChannelCallback	wasm/include/rtc/peerconnection.hpp	/^	std::function<void(shared_ptr<DataChannel>)> mDataChannelCallback;$/;"	m	class:rtc::PeerConnection	typeref:typename:std::function<void (shared_ptr<DataChannel>)>
mErrorCallback	wasm/include/rtc/channel.hpp	/^	std::function<void(string error)> mErrorCallback;$/;"	m	class:rtc::Channel	typeref:typename:std::function<void (string error)>
mGatheringState	wasm/include/rtc/peerconnection.hpp	/^	GatheringState mGatheringState = GatheringState::New;$/;"	m	class:rtc::PeerConnection	typeref:typename:GatheringState
mGatheringStateChangeCallback	wasm/include/rtc/peerconnection.hpp	/^	std::function<void(GatheringState candidate)> mGatheringStateChangeCallback;$/;"	m	class:rtc::PeerConnection	typeref:typename:std::function<void (GatheringState candidate)>
mId	wasm/include/rtc/datachannel.hpp	/^	int mId;$/;"	m	class:rtc::DataChannel	typeref:typename:int
mId	wasm/include/rtc/peerconnection.hpp	/^	int mId;$/;"	m	class:rtc::PeerConnection	typeref:typename:int
mId	wasm/include/rtc/websocket.hpp	/^	int mId;$/;"	m	class:rtc::WebSocket	typeref:typename:int
mLabel	wasm/include/rtc/datachannel.hpp	/^	string mLabel;$/;"	m	class:rtc::DataChannel	typeref:typename:string
mLocalCandidateCallback	wasm/include/rtc/peerconnection.hpp	/^	std::function<void(const Candidate &candidate)> mLocalCandidateCallback;$/;"	m	class:rtc::PeerConnection	typeref:typename:std::function<void (const Candidate & candidate)>
mLocalDescriptionCallback	wasm/include/rtc/peerconnection.hpp	/^	std::function<void(const Description &description)> mLocalDescriptionCallback;$/;"	m	class:rtc::PeerConnection	typeref:typename:std::function<void (const Description & description)>
mMessageCallback	wasm/include/rtc/channel.hpp	/^	std::function<void(message_variant data)> mMessageCallback;$/;"	m	class:rtc::Channel	typeref:typename:std::function<void (message_variant data)>
mMid	wasm/include/rtc/candidate.hpp	/^	string mMid;$/;"	m	class:rtc::Candidate	typeref:typename:string
mOpenCallback	wasm/include/rtc/channel.hpp	/^	std::function<void()> mOpenCallback;$/;"	m	class:rtc::Channel	typeref:typename:std::function<void ()>
mSdp	wasm/include/rtc/description.hpp	/^	string mSdp;$/;"	m	class:rtc::Description	typeref:typename:string
mSignalingState	wasm/include/rtc/peerconnection.hpp	/^	SignalingState mSignalingState = SignalingState::Stable;$/;"	m	class:rtc::PeerConnection	typeref:typename:SignalingState
mSignalingStateChangeCallback	wasm/include/rtc/peerconnection.hpp	/^	std::function<void(SignalingState candidate)> mSignalingStateChangeCallback;$/;"	m	class:rtc::PeerConnection	typeref:typename:std::function<void (SignalingState candidate)>
mState	wasm/include/rtc/peerconnection.hpp	/^	State mState = State::New;$/;"	m	class:rtc::PeerConnection	typeref:typename:State
mStateChangeCallback	wasm/include/rtc/peerconnection.hpp	/^	std::function<void(State candidate)> mStateChangeCallback;$/;"	m	class:rtc::PeerConnection	typeref:typename:std::function<void (State candidate)>
mType	wasm/include/rtc/description.hpp	/^	string mType;$/;"	m	class:rtc::Description	typeref:typename:string
map	wasm/js/webrtc.js	/^				var map = {$/;"	c	class:WebRTC.$WEBRTC.handleConnectionStateChange
map	wasm/js/webrtc.js	/^				var map = {$/;"	c	class:WebRTC.$WEBRTC.handleGatheringStateChange
map	wasm/js/webrtc.js	/^				var map = {$/;"	c	class:WebRTC.$WEBRTC.handleSignalingStateChange
map	wasm/js/websocket.js	/^			map: {},$/;"	p	class:WebSocket.$WEBSOCKET
maxPacketLifeTime	wasm/js/webrtc.js	/^				maxPacketLifeTime: maxPacketLifeTime >= 0 ? maxPacketLifeTime : null,$/;"	p	class:WebRTC.rtcCreateDataChannel.datachannelInit
maxRetransmits	wasm/js/webrtc.js	/^				maxRetransmits: maxRetransmits >= 0 ? maxRetransmits : null,$/;"	p	class:WebRTC.rtcCreateDataChannel.datachannelInit
message_variant	wasm/include/rtc/common.hpp	/^using message_variant = std::variant<binary, string>;$/;"	t	namespace:rtc	typeref:typename:std::variant<binary,string>
mid	wasm/src/candidate.cpp	/^string Candidate::mid() const { return mMid; }$/;"	f	class:rtc::Candidate	typeref:typename:string
new	wasm/js/webrtc.js	/^					'new': 0,$/;"	p	class:WebRTC.$WEBRTC.handleConnectionStateChange.map
new	wasm/js/webrtc.js	/^					'new': 0,$/;"	p	class:WebRTC.$WEBRTC.handleGatheringStateChange.map
nextId	wasm/js/webrtc.js	/^			nextId: 1,$/;"	p	class:WebRTC.$WEBRTC
nextId	wasm/js/websocket.js	/^			nextId: 1,$/;"	p	class:WebSocket.$WEBSOCKET
onBufferedAmountLow	wasm/src/channel.cpp	/^void Channel::onBufferedAmountLow(std::function<void()> callback) {$/;"	f	class:rtc::Channel	typeref:typename:void
onClosed	wasm/src/channel.cpp	/^void Channel::onClosed(std::function<void()> callback) { mClosedCallback = std::move(callback); /;"	f	class:rtc::Channel	typeref:typename:void
onDataChannel	wasm/src/peerconnection.cpp	/^void PeerConnection::onDataChannel(function<void(shared_ptr<DataChannel>)> callback) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
onError	wasm/src/channel.cpp	/^void Channel::onError(std::function<void(string)> callback) {$/;"	f	class:rtc::Channel	typeref:typename:void
onGatheringStateChange	wasm/src/peerconnection.cpp	/^void PeerConnection::onGatheringStateChange(function<void(GatheringState state)> callback) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
onLocalCandidate	wasm/src/peerconnection.cpp	/^void PeerConnection::onLocalCandidate(function<void(const Candidate &)> callback) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
onLocalDescription	wasm/src/peerconnection.cpp	/^void PeerConnection::onLocalDescription(function<void(const Description &)> callback) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
onMessage	wasm/src/channel.cpp	/^void Channel::onMessage(std::function<void(binary data)> binaryCallback,$/;"	f	class:rtc::Channel	typeref:typename:void
onMessage	wasm/src/channel.cpp	/^void Channel::onMessage(std::function<void(message_variant data)> callback) {$/;"	f	class:rtc::Channel	typeref:typename:void
onOpen	wasm/src/channel.cpp	/^void Channel::onOpen(std::function<void()> callback) { mOpenCallback = std::move(callback); }$/;"	f	class:rtc::Channel	typeref:typename:void
onSignalingStateChange	wasm/src/peerconnection.cpp	/^void PeerConnection::onSignalingStateChange(function<void(SignalingState state)> callback) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
onStateChange	wasm/src/peerconnection.cpp	/^void PeerConnection::onStateChange(function<void(State state)> callback) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
onclose	wasm/js/webrtc.js	/^			dataChannel.onclose = function() {$/;"	f	function:dataChannel
onclose	wasm/js/websocket.js	/^			webSocket.onclose = function() {$/;"	f	function:webSocket
onconnectionstatechange	wasm/js/webrtc.js	/^				peerConnection.onconnectionstatechange = function() {$/;"	f	function:peerConnection
ondatachannel	wasm/js/webrtc.js	/^			peerConnection.ondatachannel = function(evt) {$/;"	f	function:peerConnection
onicecandidate	wasm/js/webrtc.js	/^				peerConnection.onicecandidate = function(evt) {$/;"	f	function:peerConnection
onicegatheringstatechange	wasm/js/webrtc.js	/^				peerConnection.onicegatheringstatechange = function() {$/;"	f	function:peerConnection
onmessage	wasm/js/webrtc.js	/^			dataChannel.onmessage = function(evt) {$/;"	f	function:dataChannel
onmessage	wasm/js/websocket.js	/^			webSocket.onmessage = function(evt) {$/;"	f	function:webSocket
onnegotiationneeded	wasm/js/webrtc.js	/^				peerConnection.onnegotiationneeded = function() {$/;"	f	function:peerConnection
onsignalingstatechange	wasm/js/webrtc.js	/^				peerConnection.onsignalingstatechange = function() {$/;"	f	function:peerConnection
open	wasm/src/websocket.cpp	/^void WebSocket::open(const string &url) {$/;"	f	class:rtc::WebSocket	typeref:typename:void
operator <<	wasm/src/candidate.cpp	/^std::ostream &operator<<(std::ostream &out, const rtc::Candidate &candidate) {$/;"	f	typeref:typename:std::ostream &
operator <<	wasm/src/description.cpp	/^std::ostream &operator<<(std::ostream &out, const rtc::Description &description) {$/;"	f	typeref:typename:std::ostream &
operator <<	wasm/src/description.cpp	/^std::ostream &operator<<(std::ostream &out, rtc::Description::Type type) {$/;"	f	typeref:typename:std::ostream &
operator string	wasm/src/candidate.cpp	/^Candidate::operator string() const { return "a=" + mCandidate; }$/;"	f	class:rtc::Candidate
operator string	wasm/src/description.cpp	/^Description::operator string() const { return mSdp; }$/;"	f	class:rtc::Description
ordered	wasm/js/webrtc.js	/^				ordered: !unordered,$/;"	p	class:WebRTC.rtcCreateDataChannel.datachannelInit
overloaded	wasm/include/rtc/common.hpp	/^template <class... Ts> struct overloaded : Ts... { using Ts::operator()...; };$/;"	s	namespace:rtc
password	wasm/include/rtc/configuration.hpp	/^	string password;$/;"	m	struct:rtc::IceServer	typeref:typename:string
peerConnectionsMap	wasm/js/webrtc.js	/^			peerConnectionsMap: {},$/;"	p	class:WebRTC.$WEBRTC
port	wasm/include/rtc/configuration.hpp	/^	uint16_t port;$/;"	m	struct:rtc::IceServer	typeref:typename:uint16_t
registerDataChannel	wasm/js/webrtc.js	/^			registerDataChannel: function(dataChannel) {$/;"	m	class:WebRTC.$WEBRTC
registerPeerConnection	wasm/js/webrtc.js	/^			registerPeerConnection: function(peerConnection) {$/;"	m	class:WebRTC.$WEBRTC
registerWebSocket	wasm/js/websocket.js	/^			registerWebSocket: function(webSocket) {$/;"	m	class:WebSocket.$WEBSOCKET
relayType	wasm/include/rtc/configuration.hpp	/^	RelayType relayType;$/;"	m	struct:rtc::IceServer	typeref:typename:RelayType
reliability	wasm/include/rtc/peerconnection.hpp	/^	Reliability reliability = {};$/;"	m	struct:rtc::DataChannelInit	typeref:typename:Reliability
remoteDescription	wasm/src/peerconnection.cpp	/^optional<Description> PeerConnection::remoteDescription() const {$/;"	f	class:rtc::PeerConnection	typeref:typename:optional<Description>
rexmit	wasm/include/rtc/reliability.hpp	/^	variant<int, std::chrono::milliseconds> rexmit = 0;$/;"	m	struct:rtc::Reliability	typeref:typename:variant<int,std::chrono::milliseconds>
rtc	wasm/include/rtc/candidate.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/channel.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/common.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/configuration.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/datachannel.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/description.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/peerconnection.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/reliability.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/rtc.hpp	/^namespace rtc {$/;"	n
rtc	wasm/include/rtc/websocket.hpp	/^namespace rtc {$/;"	n
rtc	wasm/src/candidate.cpp	/^namespace rtc {$/;"	n	file:
rtc	wasm/src/channel.cpp	/^namespace rtc {$/;"	n	file:
rtc	wasm/src/configuration.cpp	/^namespace rtc {$/;"	n	file:
rtc	wasm/src/datachannel.cpp	/^namespace rtc {$/;"	n	file:
rtc	wasm/src/description.cpp	/^namespace rtc {$/;"	n	file:
rtc	wasm/src/peerconnection.cpp	/^namespace rtc {$/;"	n	file:
rtc	wasm/src/websocket.cpp	/^namespace rtc {$/;"	n	file:
rtcAddRemoteCandidate	wasm/js/webrtc.js	/^		rtcAddRemoteCandidate: function(pc, pCandidate, pSdpMid) {$/;"	m	class:WebRTC
rtcCreateDataChannel	wasm/js/webrtc.js	/^		rtcCreateDataChannel: function(pc, pLabel, unordered, maxRetransmits, maxPacketLifeTime) {$/;"	m	class:WebRTC
rtcCreatePeerConnection	wasm/js/webrtc.js	/^		rtcCreatePeerConnection: function(pUrls, pUsernames, pPasswords, nIceServers) {$/;"	m	class:WebRTC
rtcDeleteDataChannel	wasm/js/webrtc.js	/^ 		rtcDeleteDataChannel: function(dc) {$/;"	m	class:WebRTC
rtcDeletePeerConnection	wasm/js/webrtc.js	/^		rtcDeletePeerConnection: function(pc) {$/;"	m	class:WebRTC
rtcGetBufferedAmount	wasm/js/webrtc.js	/^		rtcGetBufferedAmount: function(dc) {$/;"	m	class:WebRTC
rtcGetDataChannelLabel	wasm/js/webrtc.js	/^		rtcGetDataChannelLabel: function(dc, pBuffer, size) {$/;"	m	class:WebRTC
rtcGetLocalDescription	wasm/js/webrtc.js	/^		rtcGetLocalDescription: function(pc) {$/;"	m	class:WebRTC
rtcGetLocalDescriptionType	wasm/js/webrtc.js	/^		rtcGetLocalDescriptionType: function(pc) {$/;"	m	class:WebRTC
rtcGetRemoteDescription	wasm/js/webrtc.js	/^    rtcGetRemoteDescription: function(pc) {$/;"	m	class:WebRTC
rtcGetRemoteDescriptionType	wasm/js/webrtc.js	/^		rtcGetRemoteDescriptionType: function(pc) {$/;"	m	class:WebRTC
rtcSendMessage	wasm/js/webrtc.js	/^		rtcSendMessage: function(dc, pBuffer, size) {$/;"	m	class:WebRTC
rtcSetBufferedAmountLowCallback	wasm/js/webrtc.js	/^		rtcSetBufferedAmountLowCallback: function(dc, bufferedAmountLowCallback) {$/;"	m	class:WebRTC
rtcSetBufferedAmountLowThreshold	wasm/js/webrtc.js	/^		rtcSetBufferedAmountLowThreshold: function(dc, threshold) {$/;"	m	class:WebRTC
rtcSetDataChannelCallback	wasm/js/webrtc.js	/^		rtcSetDataChannelCallback: function(pc, dataChannelCallback) {$/;"	m	class:WebRTC
rtcSetErrorCallback	wasm/js/webrtc.js	/^		rtcSetErrorCallback: function(dc, errorCallback) {$/;"	m	class:WebRTC
rtcSetGatheringStateChangeCallback	wasm/js/webrtc.js	/^		rtcSetGatheringStateChangeCallback: function(pc, gatheringStateChangeCallback) {$/;"	m	class:WebRTC
rtcSetLocalCandidateCallback	wasm/js/webrtc.js	/^		rtcSetLocalCandidateCallback: function(pc, candidateCallback) {$/;"	m	class:WebRTC
rtcSetLocalDescriptionCallback	wasm/js/webrtc.js	/^		rtcSetLocalDescriptionCallback: function(pc, descriptionCallback) {$/;"	m	class:WebRTC
rtcSetMessageCallback	wasm/js/webrtc.js	/^		rtcSetMessageCallback: function(dc, messageCallback) {$/;"	m	class:WebRTC
rtcSetOpenCallback	wasm/js/webrtc.js	/^		rtcSetOpenCallback: function(dc, openCallback) {$/;"	m	class:WebRTC
rtcSetRemoteDescription	wasm/js/webrtc.js	/^		rtcSetRemoteDescription: function(pc, pSdp, pType) {$/;"	m	class:WebRTC
rtcSetSignalingStateChangeCallback	wasm/js/webrtc.js	/^		rtcSetSignalingStateChangeCallback: function(pc, signalingStateChangeCallback) {$/;"	m	class:WebRTC
rtcSetStateChangeCallback	wasm/js/webrtc.js	/^		rtcSetStateChangeCallback: function(pc, stateChangeCallback) {$/;"	m	class:WebRTC
rtcSetUserPointer	wasm/js/webrtc.js	/^		rtcSetUserPointer: function(i, ptr) {$/;"	m	class:WebRTC
send	wasm/src/datachannel.cpp	/^bool DataChannel::send(const byte *data, size_t size) {$/;"	f	class:rtc::DataChannel	typeref:typename:bool
send	wasm/src/datachannel.cpp	/^bool DataChannel::send(message_variant message) {$/;"	f	class:rtc::DataChannel	typeref:typename:bool
send	wasm/src/websocket.cpp	/^bool WebSocket::send(const byte *data, size_t size) {$/;"	f	class:rtc::WebSocket	typeref:typename:bool
send	wasm/src/websocket.cpp	/^bool WebSocket::send(message_variant message) {$/;"	f	class:rtc::WebSocket	typeref:typename:bool
setBufferedAmountLowThreshold	wasm/src/channel.cpp	/^void Channel::setBufferedAmountLowThreshold(size_t amount) { \/* Dummy *\/$/;"	f	class:rtc::Channel	typeref:typename:void
setBufferedAmountLowThreshold	wasm/src/datachannel.cpp	/^void DataChannel::setBufferedAmountLowThreshold(size_t amount) {$/;"	f	class:rtc::DataChannel	typeref:typename:void
setRemoteDescription	wasm/src/peerconnection.cpp	/^void PeerConnection::setRemoteDescription(const Description &description) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
signalingState	wasm/src/peerconnection.cpp	/^PeerConnection::SignalingState PeerConnection::signalingState() const { return mSignalingState; /;"	f	class:rtc::PeerConnection	typeref:typename:PeerConnection::SignalingState
stable	wasm/js/webrtc.js	/^					'stable': 0,$/;"	p	class:WebRTC.$WEBRTC.handleSignalingStateChange.map
state	wasm/src/peerconnection.cpp	/^PeerConnection::State PeerConnection::state() const { return mState; }$/;"	f	class:rtc::PeerConnection	typeref:typename:PeerConnection::State
stringToType	wasm/src/description.cpp	/^Description::Type Description::stringToType(const string &typeString) {$/;"	f	class:rtc::Description	typeref:typename:Description::Type
triggerBufferedAmountLow	wasm/src/channel.cpp	/^void Channel::triggerBufferedAmountLow() {$/;"	f	class:rtc::Channel	typeref:typename:void
triggerClosed	wasm/src/channel.cpp	/^void Channel::triggerClosed() {$/;"	f	class:rtc::Channel	typeref:typename:void
triggerDataChannel	wasm/src/peerconnection.cpp	/^void PeerConnection::triggerDataChannel(shared_ptr<DataChannel> dataChannel) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
triggerError	wasm/src/channel.cpp	/^void Channel::triggerError(string error) {$/;"	f	class:rtc::Channel	typeref:typename:void
triggerGatheringStateChange	wasm/src/peerconnection.cpp	/^void PeerConnection::triggerGatheringStateChange(GatheringState state) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
triggerLocalCandidate	wasm/src/peerconnection.cpp	/^void PeerConnection::triggerLocalCandidate(const Candidate &candidate) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
triggerLocalDescription	wasm/src/peerconnection.cpp	/^void PeerConnection::triggerLocalDescription(const Description &description) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
triggerMessage	wasm/src/channel.cpp	/^void Channel::triggerMessage(const message_variant data) {$/;"	f	class:rtc::Channel	typeref:typename:void
triggerOpen	wasm/src/channel.cpp	/^void Channel::triggerOpen() {$/;"	f	class:rtc::Channel	typeref:typename:void
triggerOpen	wasm/src/datachannel.cpp	/^void DataChannel::triggerOpen() {$/;"	f	class:rtc::DataChannel	typeref:typename:void
triggerOpen	wasm/src/websocket.cpp	/^void WebSocket::triggerOpen() {$/;"	f	class:rtc::WebSocket	typeref:typename:void
triggerSignalingStateChange	wasm/src/peerconnection.cpp	/^void PeerConnection::triggerSignalingStateChange(SignalingState state) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
triggerStateChange	wasm/src/peerconnection.cpp	/^void PeerConnection::triggerStateChange(State state) {$/;"	f	class:rtc::PeerConnection	typeref:typename:void
type	wasm/include/rtc/configuration.hpp	/^	Type type;$/;"	m	struct:rtc::IceServer	typeref:typename:Type
type	wasm/include/rtc/reliability.hpp	/^	Type type = Type::Reliable;$/;"	m	struct:rtc::Reliability	typeref:typename:Type
type	wasm/src/description.cpp	/^Description::Type Description::type() const { return stringToType(mType); }$/;"	f	class:rtc::Description	typeref:typename:Description::Type
typeString	wasm/src/description.cpp	/^string Description::typeString() const { return mType; }$/;"	f	class:rtc::Description	typeref:typename:string
typeToString	wasm/src/description.cpp	/^string Description::typeToString(Type type) {$/;"	f	class:rtc::Description	typeref:typename:string
unordered	wasm/include/rtc/reliability.hpp	/^	bool unordered = false;$/;"	m	struct:rtc::Reliability	typeref:typename:bool
username	wasm/include/rtc/configuration.hpp	/^	string username;$/;"	m	struct:rtc::IceServer	typeref:typename:string
wsCreateWebSocket	wasm/js/websocket.js	/^		wsCreateWebSocket: function(pUrl) {$/;"	m	class:WebSocket
wsDeleteWebSocket	wasm/js/websocket.js	/^		wsDeleteWebSocket: function(ws) {$/;"	m	class:WebSocket
wsSendMessage	wasm/js/websocket.js	/^		wsSendMessage: function(ws, pBuffer, size) {$/;"	m	class:WebSocket
wsSetErrorCallback	wasm/js/websocket.js	/^ 		wsSetErrorCallback: function(ws, errorCallback) {$/;"	m	class:WebSocket
wsSetMessageCallback	wasm/js/websocket.js	/^		wsSetMessageCallback: function(ws, messageCallback) {$/;"	m	class:WebSocket
wsSetOpenCallback	wasm/js/websocket.js	/^		wsSetOpenCallback: function(ws, openCallback) {$/;"	m	class:WebSocket
wsSetUserPointer	wasm/js/websocket.js	/^		wsSetUserPointer: function(ws, ptr) {$/;"	m	class:WebSocket
~DataChannel	wasm/src/datachannel.cpp	/^DataChannel::~DataChannel() { close(); }$/;"	f	class:rtc::DataChannel
~PeerConnection	wasm/src/peerconnection.cpp	/^PeerConnection::~PeerConnection() { rtcDeletePeerConnection(mId); }$/;"	f	class:rtc::PeerConnection
~WebSocket	wasm/src/websocket.cpp	/^WebSocket::~WebSocket() { close(); }$/;"	f	class:rtc::WebSocket
